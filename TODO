->  comparer chiffre à chiffre (aligner à droite, ignorer les zéros à gauche? )

-> au niveau d'une colonne: les réponses bonnes malgré retenue (surement issues de procédure) doivent-elles être considérées comme des erreurs ?

-> 562 - 3 = 259 -> on devrait voir le blank bug seulement !! (utiliser une règle sur l'écart (faisable de tête


ot bugs:
addition au lieu de soustraction
N-M=N
-> Comment gérer le recopiage de la première ligne ?...détecter les 'espaces' les traiter dans bugId per digit et considérer le recopiage en priorité sur le 'blank bug'
-> remplacer les import * par r_data et t_data...
-> détecter dominant
aller jusqu'aux simulations !! bug:que générer quand 0 bug dans une colonne (et sans correct_col ou copy) ???
tolérance +-1

TOFIX
-> incomplete AND blank bugs...-> nouvelle représentation des bugs ?

VALIDATION
comparer avec un bruit (nb aléatoires de 2 à 4 colonnes ??)
& comparer avec les stratégies de réparation de VanLehn
((id des bugs par couples de colonnes))


PRÉSENTATION
illustrer clairement comparaison (R sujets | result simul) sur la sheet entière (SDL, pygame?)
rep des soustractions incomplètes avec autre couleur

SDL
réussir à rester idle tant que pas d'events...
-> mettre le background pré-généré dans une surface (les fonctions draw devraient retourner une surface au lieu d'écrire)
passer l'appli dans une classe : http://pygametutorials.wikidot.com/tutorials-basic

GTK
file chooser gtk3


///pas envoyés
-affichage des plots dans un thread séparé pour ne pas bloquer l'interface principale

-codage d'une fonction de génération de simulation en fonction du profil

-affichage du résultat de la simulation en dessous du résultat produit par le sujet

-recodage de la fonction d'affichage des infos pour améliorer la clarté et l'extensibilité

- ajout de touches "sujet suivant", "sujet précédent"


-afficher liste cliquable des sujets disponibles ou champ de recherche
-méthode pour recalculer facilement la poss_sheet (et la stocker dans un fichier)